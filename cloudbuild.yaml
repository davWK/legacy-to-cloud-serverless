substitutions:
  _REGION: us-central1
  _REPOSITORY: from-legacy-to-cloud
  _IMAGE: from-legacy-to-cloud
  _SEVERITY: ''
  _SERVICE_NAME: from-legacy-to-cloud

steps:
# Step 0: Install test dependencies
# - name: 'python:3.10-slim'
#   entrypoint: '/bin/bash'
#   args:
#     - '-c'
#     - |
#       pip install --user -r cloud_run/requirements-test.txt
#   id: 'install-test-dependencies'

# Step 1: Run unit tests
# - name: 'python:3.10-slim'
#   entrypoint: '/bin/bash'
#   args:
#     - '-c'
#     - |
#       export TESTING=True
#       cd cloud_run 
#       python -m unittest test.py
#   id: 'run-tests'

# Step 2: Build the Docker image
- name: 'gcr.io/cloud-builders/docker'
  args: ['build', '--no-cache', '-t', '$_REGION-docker.pkg.dev/$PROJECT_ID/$_REPOSITORY/$_IMAGE:$COMMIT_SHA', 'docker/']
  # waitFor: ['run-tests']
  id: 'build-image'

# Step 3: Print the contents of your app.py file
- name: 'gcr.io/cloud-builders/docker'
  args: ['run', '--rm', '$_REGION-docker.pkg.dev/$PROJECT_ID/$_REPOSITORY/$_IMAGE:$COMMIT_SHA', 'cat', '/app/app.py']
  id: 'print-app-py'

# Step 3.1: Print the latest commit hash
- name: 'gcr.io/cloud-builders/git'
  args: ['rev-parse', 'HEAD']
  id: 'print-latest-commit'

# Step 4: Print the list of installed Python packages
- name: 'gcr.io/cloud-builders/docker'
  args: ['run', '--rm', '$_REGION-docker.pkg.dev/$PROJECT_ID/$_REPOSITORY/$_IMAGE:$COMMIT_SHA', 'pip', 'freeze']
  id: 'print-installed-packages'

# Step 5: Print the environment variables
- name: 'gcr.io/cloud-builders/docker'
  args: ['run', '--rm', '$_REGION-docker.pkg.dev/$PROJECT_ID/$_REPOSITORY/$_IMAGE:$COMMIT_SHA', 'env']
  id: 'print-env-vars'

# Step 6: Inspect the Docker image and write the digest to a file.
- name: 'gcr.io/cloud-builders/docker'
  entrypoint: '/bin/bash'
  args:
    - '-c'
    - |
      docker image inspect $_REGION-docker.pkg.dev/$PROJECT_ID/$_REPOSITORY/$_IMAGE:$COMMIT_SHA --format '{{index .RepoTags 0}}@{{.Id}}' > /workspace/image-digest.txt &&
      cat /workspace/image-digest.txt
  id: 'inspect-image'

# Step 7: Scan the Docker image for vulnerabilities
- id: scan
  name: gcr.io/google.com/cloudsdktool/cloud-sdk
  entrypoint: /bin/bash
  args:
  - -c
  - |
    gcloud artifacts docker images scan $_REGION-docker.pkg.dev/$PROJECT_ID/$_REPOSITORY/$_IMAGE:$COMMIT_SHA \
    --format='value(response.scan)' > /workspace/scan_id.txt

# Step 8: Check the severity of any vulnerabilities found
- id: severity check
  name: gcr.io/google.com/cloudsdktool/cloud-sdk
  entrypoint: /bin/bash
  args:
  - -c
  - |
    gcloud artifacts docker images list-vulnerabilities $(cat /workspace/scan_id.txt) \
    --format='value(vulnerability.effectiveSeverity)' | if grep -Exq $_SEVERITY; \
    then echo 'Failed vulnerability check' && exit 1; else exit 0; fi

# Step 9: Push the Docker image to Google Cloud Artifact Registry
- name: 'gcr.io/cloud-builders/docker'
  args: ['push', '$_REGION-docker.pkg.dev/$PROJECT_ID/$_REPOSITORY/$_IMAGE:$COMMIT_SHA']
  id: 'push-image'
  waitFor: ['severity check']

# Step 10: Deploy the Docker image to Cloud Run
# - id: 'deploy-image'
#   name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
#   entrypoint: 'gcloud'
#   args:
#   - 'run'
#   - 'deploy'
#   - '$_SERVICE_NAME'
#   - '--image'
#   - '$_REGION-docker.pkg.dev/$PROJECT_ID/$_REPOSITORY/$_IMAGE:$COMMIT_SHA'
#   - '--region'
#   - '$_REGION'
#   - '--platform'
#   - 'managed'
#   waitFor: ['push-image']

images:
- '$_REGION-docker.pkg.dev/$PROJECT_ID/$_REPOSITORY/$_IMAGE:$COMMIT_SHA'